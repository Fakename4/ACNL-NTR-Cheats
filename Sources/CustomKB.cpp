#include "cheats.hpp"

namespace CTRPluginFramework
{
	void	CustomKB(MenuEntry *entry)
	{
        u16 KBOpen;
		u32 offset;
        static u32 pointer = reinterpret_cast<u32>(Game::Keyboard);
		static u8 buffer[] = { 0x00, 0xE0, 0x01, 0xE0, 0x02, 0xE0, 0x03, 0xE0, 0x04, 0xE0, 0x05, 0xE0, 0x06, 0xE0, 0x08, 0xE0, 0x09, 0xE0, 0x70, 0xE0, 0x6F, 0xE0, 0x6C, 0xE0, 0x0C, 0xE0, 0x0D, 0xE0, 0x0E, 0xE0, 0x0F, 0xE0, 0x10, 0xE0, 0x11, 0xE0, 0x12, 0xE0, 0x13, 0xE0, 0x14, 0xE0, 0x3C, 0xE0, 0x3B, 0xE0, 0x3D, 0xE0, 0x72, 0xE0, 0x19, 0xE0, 0x1A, 0xE0, 0x1B, 0xE0, 0x1C, 0xE0, 0x1D, 0xE0, 0x1E, 0xE0, 0x1F, 0xE0, 0x20, 0xE0, 0x21, 0xE0, 0x22, 0xE0, 0x23, 0xE0, 0x24, 0xE0, 0x25, 0xE0, 0x26, 0xE0, 0x27, 0xE0, 0x28, 0xE0, 0x29, 0xE0, 0x2A, 0xE0, 0x2B, 0xE0, 0x2C, 0xE0, 0x2D, 0xE0, 0x2E, 0xE0, 0x2F, 0xE0, 0x30, 0xE0, 0x31, 0xE0, 0x32, 0xE0, 0x33, 0xE0, 0x34, 0xE0, 0x35, 0xE0, 0x36, 0xE0, 0x37, 0xE0, 0x38, 0xE0, 0x39, 0xE0, 0x79, 0xE0, 0x7A, 0xE0, 0x7B, 0xE0, 0x7C, 0xE0, 0x3E, 0xE0, 0x3F, 0xE0, 0x40, 0xE0, 0x41, 0xE0, 0x42, 0xE0, 0x43, 0xE0, 0x44, 0xE0, 0x45, 0xE0, 0x46, 0xE0, 0x47, 0xE0, 0x48, 0xE0, 0x49, 0xE0, 0x4A, 0xE0, 0x4B, 0xE0, 0x4C, 0xE0, 0x4D, 0xE0, 0x4E, 0xE0, 0x4F, 0xE0, 0x50, 0xE0, 0x51, 0xE0, 0x52, 0xE0, 0x53, 0xE0, 0x54, 0xE0, 0x55, 0xE0, 0x56, 0xE0, 0x57, 0xE0, 0x58, 0xE0, 0x59, 0xE0, 0x5A, 0xE0, 0x5B, 0xE0, 0x5C, 0xE0, 0x5D, 0xE0, 0x5E, 0xE0, 0x5F, 0xE0, 0x60, 0xE0, 0x61, 0xE0, 0x62, 0xE0, 0x63, 0xE0, 0x64, 0xE0, 0x65, 0xE0, 0x69, 0xE0, 0x67, 0xE0, 0x73, 0xE0, 0x74, 0xE0, 0x75, 0xE0, 0x76, 0xE0, 0x77, 0xE0, 0x78, 0xE0};

        Process::Read16(pointer - 0x5E0, KBOpen);
        if (KBOpen == 0x0103) //If keyboard UI is open
		{
            Process::Read32(pointer, offset);
			if (offset != 0)
			{  
                Process::Read32(offset + 0x224, offset);
				if (Check8Value(offset + 0x26, 0x2E))  //If first symbol from USA/EUR keyboard
                    Process::CopyMemory(reinterpret_cast<void *>(offset + 0x26), buffer, 0xDB);
                
               	else if (Check8Value(offset + 0xC, 0x01)) //If first symbol from JAP keyboard
                Process::CopyMemory(reinterpret_cast<void *>(offset + 0xC), buffer, 0xDB);
			}
		}
	}
}